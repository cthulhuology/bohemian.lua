Bohemian.lua - Just A Casual Casual Easy Thing
==============================================

Â© 2013 David J Goehrig <dave@dloh.org>
All Rights Reserved


What is Bohemian.lua
--------------------

Bohemian.lua is a minimalistic programming model for Lua that uses functions as if they were objects
with dynamic dispatch with does not understand, single generation dynamic multiple inheritance, and
behaviorlist tendencies.  For example, the _ is a function which constructs a new function object 
which acts as the environment. By chaining function calls, we can write complete programs which
operate within the lexically scoped context of this environment:

	_ = require('bohemian')._
	_()
		("has","message","hello ")
		("does","greet", function(self,Who) print(self("message") .. Who) end)
		("greet", "world!")

Since functions in Lua are first class, we can extend the capabilities of this context and any
nested sub contexts in a similar manner:

	o = _()
	("has","Bob",_()
		("has", "greeting", "Hi ")
		("has", "friend", _()
			("has","name","Mary"))
			("does", "greet", function(self,Who)
				print("Hola " .. Who .. "!")
				return self
			end)
		("does", "greet", function(self,Who)
			print(self("greeting") .. Who .. "!")
			return self
		end))

	o("Bob")
		("greet", o("Bob")("friend")("name"))
		("friend")("greet","Bob")

We don't just have to compose objects inline either, but can use references to nest relationships
as well:

	-- we can use this as a prototype
	Person = function() 
		return _()
			("has", "wallet", 10)	-- dollars in wallet
			("does", "dollars", function(self)
				print(self("name") .. " has $" .. self("wallet") .. ".")
				return self
			end)
			("does", "take", function(self,dollars)
				self("has", "wallet", self("wallet") + dollars)
				return self
			end)
			("does", "give", function(self,person,dollars)
				if dollars < self("wallet") and dollars > 0 then
					self("has","wallet", self("wallet") - dollars)
					person("take",dollars)
				else
					print(self("name") .. " doesn't have $" .. dollars)
				end
				return self
			end)
	end

	Bob = Person()("has","name","Bob")
	Alice = Person()("has","name","Alice")

	-- Bob gives Alice 4
	Bob("give",Alice, 4)
	Bob("dollars")
	Alice("dollars")

	-- Bob can't give Alice 10 as he only has 6 left
	Bob("give",Alice, 10)

	-- Alice gives Bob 10 back
	Alice("give",Bob, 10)
	Bob("dollars")
	Alice("dollars")

Bohemian also support single generation multiple parent dynamic inheritance.  What this means is 
that each object can inherit properties of zero or more parent objects.  The parents are strictly 
ordered and resolve in the order they are invoked such as:

	Homer = _()
		("has","age",33)
		("has","first name","Homer")
		("has","last name", "Simpson")
		("does","name", function(self)
			return self("first name") .. " " .. self("last name")
		end)
		("has","address","742 Evergreen Tr.")
		("has","occupation","Nuclear Technician")
		("does","eat", function(self,food)
			if food == "donuts" or food == "beer" then
				print("mmmmh " .. food)
			else
				print("meh!")
			end
		end)

	-- Bart inherits name, address, and "last name" from Homer
	Bart = _(Homer)
		("has","first name","Bart")
		("has","age",9)
		("has","occupation","student")
		("does","eat",function(self,food)
			if food == "my shorts" then
				print("eat " .. food)
			else
				print("meh!")
			end
		end)

	-- Lisa inherits occupation from Bart, and name, address, and "last name" from Homer
	Lisa = _(Bart,Homer)	
		("has","first name","Lisa")
		("has","age",7)
		("does","eat",function(self,food)
			print("I don't eat anything that casts a shadow")
		end)

This allows you to not repeat yourself if you don't have to repeat yourself, but you can still
still repeat yourself if you want to repeat yourself.  It also allows you to construct inheritance
schemes that would be impossible in other languages.  For example, since we have only single 
generation inheritance we can have B inherit from A, C inherit from B, and A inherit from C,
but not A inherit from B!

	-- create a base object A
	A = _()("does","say", function() print("hello") end)

	-- create an object B that derives from A
	B = _(A)("does","yell", function() print("HELLO") end)

	-- create an object C that derives from B
	C = _(B)("does","spell", function() print("h.e.l.l.o.") end)

	-- make A derive from C! (this is a ring inheritence A -> B -> C -> A)
	A("is",C)

This example has each A, B, and C capable of responding to only two of the messages "say","yell", 
and "spell".  A & C can "spell", A & B can "say", and B & C can "yell".  We could use the multiple
parent thing to create another object D that can do all three:

	D = _(A,B,C)

But this poor bastard now has 3 explicit parents from whom he inherits his capabilities.  In this
fashion, we can emulate multiple generations of inheritence by begatting from the beginning.  Since
the order is explicit, we can be certain of the order of traversal. 



Why?!? Dear God! Why?!?
-----------------------

Because I can?  Really, when you get right down to it, all languages with first class functions and
closures are the same.  When you strip away all the funny syntax and wars over silly things, you can
derive a fairly nice prototypal language made entirely of closures and dynamic dispatch via function
calls.  The crazy thing is this is just straight Lua!

I've also implemented the same basic scheme in Javascript, and aside for the function definitions, 
the two languages become almost indistinguishable.  With a little clever parsing, it is also possible
to remove even those differences.  In the end, it's just a casual easy Lispy thing.


License
-------

 Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 following conditions are met:
 
 Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and
 the following disclaimer in the documentation andor other materials provided with the distribution.
 
 Neither the name of the project nor the names of its contributors may be used to endorse or promote products derived
 from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
 CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 POSSIBILITY OF SUCH DAMAGE.

